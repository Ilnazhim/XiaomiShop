{"name": "test_order_from_product_page", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"btn btn_small map-item__btn map-item__choose js-select-shop js-reserve-shop\" data-shop-id=\"MIRUP02923\" data-shop-title=\"Рекомендованный магазин, ТЦ Демидовский\" data-shop-distance=\"1512.48 км\" data-product-ean=\"6934177791765\">...</button> is not clickable at point (1109, 589). Other element would receive the click: <div class=\"policy-banner__block\">...</div>\n  (Session info: chrome=109.0.5414.75)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x00926643]\n\t(No symbol) [0x008BBE21]\n\t(No symbol) [0x007BDA9D]\n\t(No symbol) [0x007F92B2]\n\t(No symbol) [0x007F6970]\n\t(No symbol) [0x007F3E0B]\n\t(No symbol) [0x007F2548]\n\t(No symbol) [0x007E6B13]\n\t(No symbol) [0x0080FD7C]\n\t(No symbol) [0x007E641F]\n\t(No symbol) [0x008100D4]\n\t(No symbol) [0x00826B09]\n\t(No symbol) [0x0080FB76]\n\t(No symbol) [0x007E49C1]\n\t(No symbol) [0x007E5E5D]\n\tGetHandleVerifier [0x00B9A142+2497106]\n\tGetHandleVerifier [0x00BC85D3+2686691]\n\tGetHandleVerifier [0x00BCBB9C+2700460]\n\tGetHandleVerifier [0x009D3B10+635936]\n\t(No symbol) [0x008C4A1F]\n\t(No symbol) [0x008CA418]\n\t(No symbol) [0x008CA505]\n\t(No symbol) [0x008D508B]\n\tBaseThreadInitThunk [0x770FFA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x775A7A7E+286]\n\tRtlGetAppContainerNamedObjectPath [0x775A7A4E+238]", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"916e3ac15616ba653821215b96ecb9d4\")>\n\n    @allure.description(\"Test order_from_product_page\")\n    def test_order_from_product_page(browser):\n    \n        link = \"https://grechka:digital@xiaomi-shop.grechka.digital/catalog/smartfony-i-planshety/redmi/redmi-10c-3-64-gb-mint-green\"\n        print(\"\\nStart Restaurant forma\")\n        browser.maximize_window()\n        pp = ProductPage(browser, link)\n        pp.open()\n>       pp.make_the_order()\n\ntests\\test_make_order.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\product_page.py:130: in make_the_order\n    self.click_button_reserve()\npages\\product_page.py:82: in click_button_reserve\n    self.get_button_reserve().click()\n..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:88: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:396: in _execute\n    return self._parent.execute(command, params)\n..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000020FB0D3C310>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x775A7A7E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x775A7A4E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"btn btn_small map-item__btn map-item__choose js-select-shop js-reserve-shop\" data-shop-id=\"MIRUP02923\" data-shop-title=\"Рекомендованный магазин, ТЦ Демидовский\" data-shop-distance=\"1512.48 км\" data-product-ean=\"6934177791765\">...</button> is not clickable at point (1109, 589). Other element would receive the click: <div class=\"policy-banner__block\">...</div>\nE         (Session info: chrome=109.0.5414.75)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x00926643]\nE       \t(No symbol) [0x008BBE21]\nE       \t(No symbol) [0x007BDA9D]\nE       \t(No symbol) [0x007F92B2]\nE       \t(No symbol) [0x007F6970]\nE       \t(No symbol) [0x007F3E0B]\nE       \t(No symbol) [0x007F2548]\nE       \t(No symbol) [0x007E6B13]\nE       \t(No symbol) [0x0080FD7C]\nE       \t(No symbol) [0x007E641F]\nE       \t(No symbol) [0x008100D4]\nE       \t(No symbol) [0x00826B09]\nE       \t(No symbol) [0x0080FB76]\nE       \t(No symbol) [0x007E49C1]\nE       \t(No symbol) [0x007E5E5D]\nE       \tGetHandleVerifier [0x00B9A142+2497106]\nE       \tGetHandleVerifier [0x00BC85D3+2686691]\nE       \tGetHandleVerifier [0x00BCBB9C+2700460]\nE       \tGetHandleVerifier [0x009D3B10+635936]\nE       \t(No symbol) [0x008C4A1F]\nE       \t(No symbol) [0x008CA418]\nE       \t(No symbol) [0x008CA505]\nE       \t(No symbol) [0x008D508B]\nE       \tBaseThreadInitThunk [0x770FFA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x775A7A7E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x775A7A4E+238]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: ElementClickInterceptedException"}, "description": "Test order_from_product_page", "steps": [{"name": "make_the_order from product page", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"btn btn_small map-item__btn map-item__choose js-select-shop js-reserve-shop\" data-shop-id=\"MIRUP02923\" data-shop-title=\"Рекомендованный магазин, ТЦ Демидовский\" data-shop-distance=\"1512.48 км\" data-product-ean=\"6934177791765\">...</button> is not clickable at point (1109, 589). Other element would receive the click: <div class=\"policy-banner__block\">...</div>\n  (Session info: chrome=109.0.5414.75)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x00926643]\n\t(No symbol) [0x008BBE21]\n\t(No symbol) [0x007BDA9D]\n\t(No symbol) [0x007F92B2]\n\t(No symbol) [0x007F6970]\n\t(No symbol) [0x007F3E0B]\n\t(No symbol) [0x007F2548]\n\t(No symbol) [0x007E6B13]\n\t(No symbol) [0x0080FD7C]\n\t(No symbol) [0x007E641F]\n\t(No symbol) [0x008100D4]\n\t(No symbol) [0x00826B09]\n\t(No symbol) [0x0080FB76]\n\t(No symbol) [0x007E49C1]\n\t(No symbol) [0x007E5E5D]\n\tGetHandleVerifier [0x00B9A142+2497106]\n\tGetHandleVerifier [0x00BC85D3+2686691]\n\tGetHandleVerifier [0x00BCBB9C+2700460]\n\tGetHandleVerifier [0x009D3B10+635936]\n\t(No symbol) [0x008C4A1F]\n\t(No symbol) [0x008CA418]\n\t(No symbol) [0x008CA505]\n\t(No symbol) [0x008D508B]\n\tBaseThreadInitThunk [0x770FFA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x775A7A7E+286]\n\tRtlGetAppContainerNamedObjectPath [0x775A7A4E+238]\n\n", "trace": "  File \"C:\\Users\\ilnazhim\\environments\\XiaomiShop\\pages\\product_page.py\", line 130, in make_the_order\n    self.click_button_reserve()\n  File \"C:\\Users\\ilnazhim\\environments\\XiaomiShop\\pages\\product_page.py\", line 82, in click_button_reserve\n    self.get_button_reserve().click()\n  File \"C:\\Users\\ilnazhim\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 88, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"C:\\Users\\ilnazhim\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 396, in _execute\n    return self._parent.execute(command, params)\n  File \"C:\\Users\\ilnazhim\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 429, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\ilnazhim\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 243, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1674129318039, "stop": 1674129328346}], "start": 1674129313717, "stop": 1674129328350, "uuid": "2e7f335d-5856-4605-a817-854b5abed021", "historyId": "68a5f6bb4221602a7f874a2c86803f2c", "testCaseId": "c826f7f2f4fff7658e64ed1190a24f9d", "fullName": "tests.test_make_order#test_order_from_product_page", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_make_order"}, {"name": "host", "value": "HOME-PC"}, {"name": "thread", "value": "17960-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_make_order"}]}